{"version":3,"sources":["components/Header.js","components/Permission.js","components/PermissionsList.js","components/Command.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","Grid","container","justify","item","xs","md","Typography","variant","Permission","useState","read","setRead","write","setWrite","execute","setExecute","updateValues","section","setPropertyAndCallCalculate","property","value","newValue","spacing","Checkbox","checked","onChange","inputProps","PermissionsList","values","Command","command","App","calculateValue","arr","reduce","prev","current","index","calculateCommand","S","G","O","console","log","setState","state","this","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fc373736.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n//MaterialUI\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nfunction Header(props) {\n    return (\n        <Grid container justify=\"center\">\n            <Grid item xs={12} md={12} >\n                <Typography variant=\"h1\">\n                    Linux Permissions\n            </Typography>\n            </Grid>\n        </Grid>\n    )\n}\n\nHeader.propTypes = {\n\n}\n\nexport default Header\n\n","import React, { useState } from 'react'\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\n\nfunction Permission(props) {\n    const [read, setRead] = useState(false)\n    const [write, setWrite] = useState(false)\n    const [execute, setExecute] = useState(false)\n    const { updateValues, section } = props;\n\n    const setPropertyAndCallCalculate = (property, value) => {\n        const newValue = !value;\n        if (property === 'R') {\n            setRead(newValue)\n            updateValues(section, [newValue, write, execute])\n        } else if (property === 'W') {\n            setWrite(newValue)\n            updateValues(section, [read, newValue, execute])\n        } else if (property === 'X') {\n            setExecute(newValue)\n            updateValues(section, [read, write, newValue])\n        }\n    }\n\n    return (\n        <div>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item>\n                    <Typography>R</Typography>\n                    <Checkbox\n                        checked={read}\n                        onChange={() => setPropertyAndCallCalculate('R', read)}\n                        inputProps={{ 'aria-label': 'primary checkbox' }}\n                    />\n                </Grid>\n                <Grid item>\n                    <Typography>W</Typography>\n                    <Checkbox\n                        checked={write}\n                        onChange={() => setPropertyAndCallCalculate('W', write)}\n                        inputProps={{ 'aria-label': 'primary checkbox' }}\n                    />\n                </Grid>\n                <Grid item>\n                    <Typography>X</Typography>\n                    <Checkbox\n                        checked={execute}\n                        onChange={() => setPropertyAndCallCalculate('X', execute)}\n                        inputProps={{ 'aria-label': 'primary checkbox' }}\n                    />\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Permission\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n// MaterialUI\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\n//Custom Components\nimport Permission from './Permission'\n\nfunction PermissionsList(props) {\n    const { updateValues, values } = props\n\n    return (\n        <Grid container spacing={6} justify=\"center\" >\n            <Grid item xs={12} md={4} >\n                <Typography variant=\"h4\">\n                    Self/Owner\n                </Typography>\n                <Permission section=\"S\" updateValues={updateValues} />\n            </Grid>\n            <Grid item xs={12} md={4}  >\n                <Typography variant=\"h4\">\n                    Group\n                </Typography>\n                <Permission section=\"G\" updateValues={updateValues} />\n            </Grid>\n            <Grid item xs={12} md={4} >\n                <Typography variant=\"h4\">\n                    Others\n                </Typography>\n                <Permission section=\"O\" updateValues={updateValues} />\n            </Grid>\n        </Grid>\n    )\n}\n\nPermissionsList.propTypes = {\n\n}\n\nexport default PermissionsList\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n// MaterialUI\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nfunction Command(props) {\n    const { command } = props;\n    return (\n        <Grid container>\n            <Grid item xs={12}>\n                <Typography variant=\"h4\">\n                    Command To Run - {command}\n                </Typography>\n            </Grid>\n        </Grid>\n    )\n}\n\nCommand.propTypes = {\n\n}\n\nexport default Command\n\n","import React, { Component } from 'react';\n\n// MaterialUI\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\n//CSS\nimport './App.css';\n\n//Custom Components\nimport Header from './components/Header'\nimport PermissionsList from './components/PermissionsList'\nimport Command from './components/Command'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      command: null,\n      S: [false, false, false],\n      G: [false, false, false],\n      O: [false, false, false]\n    }\n  }\n\n  calculateValue = (arr) => {\n    return arr.reduce((prev, current, index) => {\n      return prev + current * 2 ** index\n    }, 0)\n\n  }\n  calculateCommand = (S, G, O) => {\n    console.log('Calculating Command')\n    console.log(S, G, O)\n    console.log(this.calculateValue(S))\n    console.log(this.calculateValue(G))\n    console.log(this.calculateValue(O))\n    this.setState({ command: `${this.calculateValue(S)}${this.calculateValue(G)}${this.calculateValue(O)}` })\n  }\n\n  updateValues = (section, values) => {\n    const { S, G, O } = this.state;\n    if (section === 'S') {\n      this.setState(() => {\n        this.calculateCommand(values, G, O)\n        return { S: values }\n      })\n    } else if (section === 'G') {\n      this.setState(() => {\n        this.calculateCommand(S, values, O)\n        return { G: values }\n      })\n    } else if (section === 'O') {\n      this.setState(() => {\n        this.calculateCommand(S, G, values)\n        return { O: values }\n      })\n    }\n\n  }\n\n\n\n  render() {\n    const { command, values } = this.state;\n    return (\n      <div className=\"App\" >\n        <Header />\n        <PermissionsList updateValues={this.updateValues} />\n        <Command command={command} />\n      </div >\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}